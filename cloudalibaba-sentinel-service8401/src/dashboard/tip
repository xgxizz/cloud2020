启动服务前需要先启动dashboard客户端(推测可以重新编译https://github.com/alibaba/Sentinel/tree/master/sentinel-dashboard，修改配置文件的端口号)
java -jar sentinel-dashboard.jar
可以配置直接流控，关联流控，链路流控模式
1.什么是流量控制？
流量控制（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。
一条限流规则主要由下面几个因素组成，我们可以组合这些元素来实现不同的限流效果：
    resource：资源名，即限流规则的作用对象
    count: 限流阈值
    grade: 限流阈值类型（QPS 或并发线程数）
    limitApp: 流控针对的调用来源，若为 default 则不区分调用来源
    strategy: 调用关系限流策略
    controlBehavior: 流量控制效果（直接拒绝、Warm Up、匀速排队）
2.按照官方文档的描述，sentinel流量控制共有两种类型：
2.1 基于 QPS/并发数的流量控制
  2.1.1 并发线程数控制
      Sentinel 并发控制不负责创建和管理线程池，而是简单统计当前请求上下文的线程数目（正在执行的调用数目），
  如果超出阈值，新的请求会被立即拒绝，效果类似于信号量隔离。并发数控制通常在调用端进行配置。见src\test\java\FlowThreadDemo.java
  2.1.2 QPS流量控制
       当 QPS 超过某个阈值的时候，则采取措施进行流量控制。流量控制的效果包括以下几种：直接拒绝（快速失败）、Warm Up、匀速排队。
  对应 FlowRule 中的 controlBehavior 字段。
  注意：若使用除了直接拒绝之外的流量控制效果，则调用关系限流策略（strategy）会被忽略。？？？？？？？？？？？？？
  直接拒绝
      直接拒绝（RuleConstant.CONTROL_BEHAVIOR_DEFAULT）方式是默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，
  拒绝方式为抛出FlowException。(这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时。)???具体的例子参见 FlowQpsDemo。
2.2 基于调用关系的流量控制
    调用关系包括调用方、被调用方；
    一个方法又可能会调用其它方法，形成一个调用链路的层次关系。
    Sentinel 通过 NodeSelectorSlot 建立不同资源间的调用的关系，并且通过 ClusterBuilderSlot 记录每个资源的实时统计信息。
    有了调用链路的统计信息，我们可以衍生出多种流量控制手段。
    2.2.1 根据调用方限流
    curl http://localhost:8719/origin?id=nodeA
    调用数据示例：
    id: nodeA
    idx origin  threadNum passedQps blockedQps totalQps aRt   1m-passed 1m-blocked 1m-total
    1   caller1 0         0         0          0        0     0         0          0
    2   caller2 0         0         0          0        0     0         0          0
    上面这个命令展示了资源名为 nodeA 的资源被两个不同的调用方调用的统计。
    流控规则中的 limitApp 字段用于根据调用来源进行流量控制。该字段的值有以下三种选项，分别对应不同的场景：
    default：表示不区分调用者，来自任何调用者的请求都将进行限流统计。如果这个资源名的调用总和超过了这条规则定义的阈值，则触发限流。
    {some_origin_name}：表示针对特定的调用者，只有来自这个调用者的请求才会进行流量控制。例如 NodeA 配置了一条针对调用者caller1的规则，那么当且仅当来自 caller1 对 NodeA 的请求才会触发流量控制。
    other：表示针对除 {some_origin_name} 以外的其余调用方的流量进行流量控制。例如，资源NodeA配置了一条针对调用者 caller1 的限流规则，同时又配置了一条调用者为 other 的规则，那么任意来自非 caller1 对 NodeA 的调用，都不能超过 other 这条规则定义的阈值。
    同一个资源名可以配置多条规则，规则的生效顺序为：{some_origin_name} > other > default
    2.2.2 根据调用链路入口限流：链路限流
